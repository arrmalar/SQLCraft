@inject IRepositoryProvider RepositoryProvider
@rendermode InteractiveServer

@if (isLoading)
{
    <div class="spinner"></div>
}
else
{
    @if (EditedDBSchemaLevelID == -1)
    {
        <button class="btn btn-success btn-sm ms-2" @onclick="@(() => Add())">
            +
        </button>

        <QuickGrid TGridItem="DBSchema" Items="@DBSchemas.AsQueryable()" Pagination="@pagination">
            <PropertyColumn Property="p => p.ID" title="ID" Sortable="true"></PropertyColumn>
            <PropertyColumn Property="p => p.Name" title="Name" Sortable="true"></PropertyColumn>
            <TemplateColumn>
                <div>
                    <span class="d-flex align-items-center">
                        <button class="btn btn-primary btn-sm ms-2"
                                @onclick="@(() => EditStart(context))"
                                title="Edit">
                            Edit
                        </button>

                        <button class="btn btn-danger btn-sm ms-2"
                                @onclick="@(() => Delete(context))"
                                title="Delete">
                            Delete
                        </button>
                    </span>
                </div>
            </TemplateColumn>

        </QuickGrid>
        <Paginator State="pagination"></Paginator>
    }
    else
    {
        <DBSchemaForm EditFinished="EditSave"
                           EditCanceled="EditCanceled"
                           ID="@EditedDBSchemaLevelID">
        </DBSchemaForm>
    }
}

@code {
    private List<DBSchema> DBSchemas { get; set; } = new List<DBSchema>();
    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private bool isLoading { get; set; } = true;
    private int EditedDBSchemaLevelID { get; set; } = -1;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await LoadDataAsync();
            }
            catch (Exception ex)
            {

            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    private async Task LoadDataAsync()
    {
        DBSchemas = await RepositoryProvider.DBSchemaRepository.GetAll();
    }

    private void EditStart(DBSchema dBSchema)
    {
        EditedDBSchemaLevelID = dBSchema.ID;
    }

    private async Task EditSave()
    {
        EditedDBSchemaLevelID = -1;
        await LoadDataAsync();
    }

    private void EditCanceled()
    {
        EditedDBSchemaLevelID = -1;
    }

    private async Task Delete(DBSchema dBSchema)
    {
        await RepositoryProvider.DBSchemaRepository.Delete(dBSchema.ID);
        await LoadDataAsync();
    }

    private void Add()
    {
        EditedDBSchemaLevelID = 0;
    }
}


