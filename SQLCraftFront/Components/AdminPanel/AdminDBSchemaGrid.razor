@inject IRepositoryProvider RepositoryProvider

@if (isLoading)
{
    <div class="spinner"></div>
}
else
{
    <QuickGrid TGridItem="DBSchema" Items="@DBSchemas.AsQueryable()" Pagination="@pagination">
        <PropertyColumn Property="p => p.ID" title="ID" Sortable="true"></PropertyColumn>

        <TemplateColumn title="Name">
            <div>
                @if (CheckIfInEditMode(context.ID))
                {
                    <span>
                        <input type="text" @bind-value="nameValue" @bind-value:event="onchange" />
                    </span>
                }
                else
                {
                    <span>
                        @context.Name
                    </span>
                }
            </div>
        </TemplateColumn>

        <TemplateColumn>
            <div>
                <span class="d-flex align-items-center">
                    @if (CheckIfInEditMode(context.ID))
                    {
                        <button class="btn btn-success btn-sm ms-2" @onclick="@EditEndWithConfirmation" title="Save">
                            Save
                        </button>

                        <button class="btn btn-danger btn-sm ms-2" @onclick="@EditEndWithCancel" title="Cancel">
                            Cancel
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-primary btn-sm ms-2" @onclick="@(() => EditStart(context))" title="Edit">
                            Edit
                        </button>

                        <button class="btn btn-danger btn-sm ms-2" @onclick="@(() => Delete(context))" title="Delete">
                            Delete
                        </button>
                    }
                </span>
            </div>
        </TemplateColumn>

    </QuickGrid>

    <span class="d-flex align-items-center">
        <button class="btn btn-success" @onclick="@Add">+</button>
    </span>

    <Paginator State="pagination"></Paginator>
}

@code {
    private List<DBSchema> DBSchemas { get; set; } = new List<DBSchema>();
    private PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    private bool isLoading { get; set; } = true;
    private int currentEditedDBSchemaID = -1;
    private string nameValue = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await LoadDataAsync();
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    private bool CheckIfInEditMode(int ID)
    {
        return this.currentEditedDBSchemaID == ID;
    }

    private async Task LoadDataAsync()
    {
        DBSchemas = await RepositoryProvider.DBSchemaRepository.GetAll();
    }

    private void EditStart(DBSchema dBSchema)
    {
        this.nameValue = dBSchema.Name;
        this.currentEditedDBSchemaID = dBSchema.ID;
    }

    private async void EditEndWithConfirmation()
    {
        var dbSchema = DBSchemas.FirstOrDefault(db => db.ID == this.currentEditedDBSchemaID);

        if (dbSchema != null)
        {
            dbSchema.Name = this.nameValue;

            if (this.currentEditedDBSchemaID != 0)
            {
                await RepositoryProvider.DBSchemaRepository.Update(dbSchema);
            }
            else
            {
                await RepositoryProvider.DBSchemaRepository.Save(dbSchema);
            }

            await LoadDataAsync();
        }

        this.currentEditedDBSchemaID = -1;
        StateHasChanged();
    }

    private void EditEndWithCancel()
    {
        var dbToDelete = DBSchemas.FirstOrDefault(db => db.ID == 0);

        if (dbToDelete != null)
        {
            DBSchemas.Remove(dbToDelete);
        }

        this.currentEditedDBSchemaID = -1;
    }

    private void Delete(DBSchema dBSchema)
    {
        DBSchemas.Remove(dBSchema);
        RepositoryProvider.DBSchemaRepository.Delete(dBSchema.ID);
    }

    private void Add()
    {
        var dbSchema = new DBSchema();
        dbSchema.ID = 0;
        dbSchema.Name = string.Empty;
        EditEndWithCancel();
        DBSchemas.Add(dbSchema);
        EditStart(dbSchema);
    }
}
