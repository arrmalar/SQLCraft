@inject IRepositoryProvider RepositoryProvider

@if (isLoading)
{
    <div class="spinner"></div>
}
else
{
    <button class="btn btn-link btn-sm p-0" @onclick="@(() => Add() )">Add riddle</button>

    <QuickGrid TGridItem="Question" Items="@QueryRiddles.AsQueryable()" Pagination="@pagination">
        <PropertyColumn Property="p => p.QuestionText" title="Question" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="p => p.DBSchema.Name" title="DBSchema" Sortable="true"></PropertyColumn>
        <TemplateColumn title="Difficulty">
            <div>
                @if (context.QuestionLevel.Name.Equals("Easy"))
                {
                    <span id="riddle-difficulty" class="badge bg-info text-dark">
                        @context.QuestionLevel.Name
                    </span>
                }
                else if (context.QuestionLevel.Name.Equals("Medium"))
                {
                    <span id="riddle-difficulty" class="badge bg-warning text-dark">
                        @context.QuestionLevel.Name
                    </span>
                }
                else
                {
                    <span id="riddle-difficulty" class="badge bg-danger text-dark">
                        @context.QuestionLevel.Name
                    </span>
                }
            </div>
        </TemplateColumn>

        <TemplateColumn>
            <div>
                <span class="d-flex align-items-center">

                    <a href="/currentTask/@context.ID" class="btn btn-outline-success btn-sm ms-2">
                        Edit
                    </a>

                    <button class="btn btn-outline-danger btn-sm ms-2" @onclick="@(() => Delete(@context) )" title="Sort Ascending">
                        Delete
                    </button>

                </span>
            </div>
        </TemplateColumn>

    </QuickGrid>
    <Paginator State="pagination"></Paginator>
}

@code {
    private List<Question> QueryRiddles { get; set; } = new List<Question>();
    private PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    private bool isLoading { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            try
            {
                await LoadDataAsync();
            }
            catch (Exception ex)
            {

            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    private async Task LoadDataAsync()
    {
        QueryRiddles = await RepositoryProvider.QuestionRepository.GetAll();
    }

    private void Delete(Question queryRiddle) {
        //RepositoryProvider.QuestionRepository.Delete(queryRiddle.ID);
        //RepositoryProvider.QuestionCorrectAnswerRepository.Delete(queryRiddle.QuestionCorrectAnswerID ?? 0);
    }

    private void Add() { 
        
    }
}

