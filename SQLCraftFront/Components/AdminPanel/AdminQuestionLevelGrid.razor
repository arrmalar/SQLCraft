@inject IRepositoryProvider RepositoryProvider

@if (isLoading)
{
    <div class="spinner"></div>
}
else
{
    <QuickGrid TGridItem="QuestionLevel" Items="@QuestionLevels.AsQueryable()" Pagination="@pagination">
        <PropertyColumn Property="p => p.ID" title="ID" Sortable="true"></PropertyColumn>

        <TemplateColumn title="Name">
            <div>
                @if (CheckIfInEditMode(context.ID))
                {
                    <span>
                        <input type="text" @bind-value="nameValue" @bind-value:event="onchange" />
                    </span>
                }
                else
                {
                    <span>
                        @context.Name
                    </span>
                }
            </div>
        </TemplateColumn>

        <TemplateColumn>
            <div>
                <span class="d-flex align-items-center">
                    @if (CheckIfInEditMode(context.ID))
                    {
                        <button class="btn btn-success btn-sm ms-2" @onclick="@EditEndWithConfirmation" title="Save">
                            Save
                        </button>

                        <button class="btn btn-danger btn-sm ms-2" @onclick="@EditEndWithCancel" title="Cancel">
                            Cancel
                        </button>
                    }
                    else
                    {
                        <button class="btn btn-primary btn-sm ms-2" @onclick="@(() => EditStart(context))" title="Edit">
                            Edit
                        </button>

                        <button class="btn btn-danger btn-sm ms-2" @onclick="@(() => Delete(context))" title="Delete">
                            Delete
                        </button>
                    }
                </span>
            </div>
        </TemplateColumn>

    </QuickGrid>

    <span class="d-flex align-items-center">
        <button class="btn btn-success" @onclick="@Add">+</button>
    </span>

    <Paginator State="pagination"></Paginator>
}

@code {
    private List<QuestionLevel> QuestionLevels { get; set; } = new List<QuestionLevel>();
    private PaginationState pagination = new PaginationState { ItemsPerPage = 10 };
    private bool isLoading { get; set; } = true;
    private int currentEditedQuestionLevelID = -1;
    private string nameValue = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                await LoadDataAsync();
            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    private bool CheckIfInEditMode(int ID)
    {
        return this.currentEditedQuestionLevelID == ID;
    }

    private async Task LoadDataAsync()
    {
        QuestionLevels = await RepositoryProvider.QuestionLevelRepository.GetAll();
    }

    private void EditStart(QuestionLevel questionLevel)
    {
        this.nameValue = questionLevel.Name;
        this.currentEditedQuestionLevelID = questionLevel.ID;
    }

    private async void EditEndWithConfirmation()
    {
        var questionLevel = QuestionLevels.FirstOrDefault(db => db.ID == this.currentEditedQuestionLevelID);

        if (questionLevel != null)
        {
            questionLevel.Name = this.nameValue;

            if (this.currentEditedQuestionLevelID != 0)
            {
                await RepositoryProvider.QuestionLevelRepository.Update(questionLevel);
            }
            else
            {
                await RepositoryProvider.QuestionLevelRepository.Save(questionLevel);
            }

            await LoadDataAsync();
        }

        this.currentEditedQuestionLevelID = -1;
        StateHasChanged();
    }

    private void EditEndWithCancel()
    {
        var dbToDelete = QuestionLevels.FirstOrDefault(db => db.ID == 0);

        if (dbToDelete != null)
        {
            QuestionLevels.Remove(dbToDelete);
        }

        this.currentEditedQuestionLevelID = -1;
    }

    private void Delete(QuestionLevel questionLevel)
    {
        QuestionLevels.Remove(questionLevel);
        RepositoryProvider.QuestionLevelRepository.Delete(questionLevel.ID);
    }

    private void Add()
    {
        var questionLevel = new QuestionLevel();
        questionLevel.ID = 0;
        questionLevel.Name = string.Empty;
        EditEndWithCancel();
        QuestionLevels.Add(questionLevel);
        EditStart(questionLevel);
    }
}
