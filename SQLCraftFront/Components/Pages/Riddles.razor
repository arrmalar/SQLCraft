@page "/riddles"

@rendermode InteractiveServer

<!-- Filter Input -->
<div class="mb-3">
    <input type="text" class="form-control" placeholder="Filter by title or difficulty..." @bind-value="FilterText" @bind-value:event="oninput" />
</div>

<!-- Table Container with Max Height and Scroll -->
<div class="table-responsive" style="max-height: 500px; overflow-y: auto;">
    <table class="table">
        <thead>
            <tr>
                <!-- Title Header with Sort Buttons -->
                <th style="position: sticky; top: 0; background-color: white; z-index: 1;">
                    Title
                    <button class="btn btn-link btn-sm p-0" @onclick="@(() => { SortByColumn("Title", true); })" title="Sort Ascending">
                        ▲
                    </button>
                    <button class="btn btn-link btn-sm p-0" @onclick="@(() => SortByColumn("Title", false))" title="Sort Descending">
                        ▼
                    </button>
                </th>

                <!-- Difficulty Header with Sort Buttons -->
                <th style="position: sticky; top: 0; background-color: white; z-index: 1;">
                    Difficulty
                    <button class="btn btn-link btn-sm p-0" @onclick="@(() => SortByColumn("Difficulty", true) )" title="Sort Ascending">
                        ▲
                    </button>
                    <button class="btn btn-link btn-sm p-0" @onclick="@(() => SortByColumn("Difficulty", false) )" title="Sort Descending">
                        ▼
                    </button>
                </th>

                <!-- Status Header (No Sorting Needed) -->
                <th style="position: sticky; top: 0; background-color: white; z-index: 1;">Status</th>

                <!-- Action Header (No Sorting Needed) -->
                <th style="position: sticky; top: 0; background-color: white; z-index: 1;">Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var queryRiddle in FilteredRiddles)
            {
                <tr>
                    <td>@queryRiddle.Title</td>
                    <td>
                        <div>
                            @if (queryRiddle.Difficulty.Equals("Easy"))
                            {
                                <span id="riddle-difficulty" class="badge bg-info text-dark">
                                    @queryRiddle.Difficulty
                                </span>
                            }
                            else if (queryRiddle.Difficulty.Equals("Medium"))
                            {
                                <span id="riddle-difficulty" class="badge bg-warning text-dark">
                                    @queryRiddle.Difficulty
                                </span>
                            }
                            else
                            {
                                <span id="riddle-difficulty" class="badge bg-danger text-dark">
                                    @queryRiddle.Difficulty
                                </span>
                            }
                        </div>
                    </td>
                    <td>
                        <div>
                            <span class="input-group-text bg-white border-0 d-flex align-items-center">
                                @if (@queryRiddle.IsCompleted)
                                {
                                    <img src="images/check.svg" class="ms-2" style="height: 1.5rem; background-color: lightgreen;" alt="Completed" />
                                }
                                else
                                {
                                    <img src="images/question-circle.svg" class="ms-2" style="height: 1.5rem; background-color: lightgray;" alt="Not Completed" />
                                }
                            </span>
                        </div>
                    </td>
                    <td>
                        <div>
                            <span class="d-flex align-items-center">
                                @if (@queryRiddle.IsCompleted)
                                {
                                    <a href="/currentTask/@queryRiddle.QueryRiddleID" class="btn btn-outline-success btn-sm ms-2">Edit</a>
                                }
                                else
                                {
                                    <a href="/currentTask/@queryRiddle.QueryRiddleID" class="btn btn-outline-primary btn-sm ms-2">Solve</a>
                                }
                            </span>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

@code {
    private List<QueryRiddle> QueryRiddles = new List<QueryRiddle>();
    private List<QueryRiddle> FilteredRiddles = new List<QueryRiddle>();


    private string _filterText { get; set; } = string.Empty;

    private string FilterText
    {
        get => _filterText;
        set
        {
            _filterText = value;

            FilteredRiddles = QueryRiddles
               .Where(r => r.Title.Contains(_filterText, StringComparison.OrdinalIgnoreCase) ||
                           r.Difficulty.Contains(_filterText, StringComparison.OrdinalIgnoreCase))
               .ToList();
        }
    }

    protected override void OnInitialized()
    {
        QueryRiddles = QueryRiddleRepository.GetAllQueryRiddles();
        FilteredRiddles = QueryRiddles;
    }

    private void SortByColumn(string columnName, bool ascending)
    {
        if (ascending)
        {
            FilteredRiddles = columnName switch
            {
                "Title" => FilteredRiddles.OrderBy(r => r.Title).ToList(),
                "Difficulty" => FilteredRiddles.OrderBy(r => r.Difficulty).ToList(),
                _ => FilteredRiddles
            };
        }
        else
        {
            FilteredRiddles = columnName switch
            {
                "Title" => FilteredRiddles.OrderByDescending(r => r.Title).ToList(),
                "Difficulty" => FilteredRiddles.OrderByDescending(r => r.Difficulty).ToList(),
                _ => FilteredRiddles
            };
        }
    }
}

