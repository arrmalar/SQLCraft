@page "/apiTest"
@rendermode InteractiveServer
@inject IRepositoryProvider RepositoryProvider



@if (isLoading)
{
    <div class="spinner"></div>
}
else
{
    <QuickGrid TGridItem="QueryRiddleDTO" Items="@QueryRiddleDTOs.AsQueryable()" Pagination="@pagination">
        <PropertyColumn Property="p => p.Question" title="Question" Sortable="true"></PropertyColumn>
        <PropertyColumn Property="p => p.DBSchema.Name" title="DBSchema" Sortable="true"></PropertyColumn>
        <TemplateColumn title="Difficulty">
                <div>
                    @if (context.QuestionLevel.Name.Equals("Easy"))
                    {
                        <span id="riddle-difficulty" class="badge bg-info text-dark">
                            @context.QuestionLevel.Name
                        </span>
                    }
                    else if (context.QuestionLevel.Name.Equals("Medium"))
                    {
                        <span id="riddle-difficulty" class="badge bg-warning text-dark">
                            @context.QuestionLevel.Name
                        </span>
                    }
                    else
                    {
                        <span id="riddle-difficulty" class="badge bg-danger text-dark">
                            @context.QuestionLevel.Name
                        </span>
                    }
                </div>
        </TemplateColumn>

        @*
        <TemplateColumn title="Status">
            <div>
                <span class="input-group-text bg-white border-0 d-flex align-items-center">
                    @if (context.IsCompleted)
                    {
                        <img src="images/check.svg" class="ms-2" style="height: 1.5rem; background-color: lightgreen;" alt="Completed" />
                    }
                    else
                    {
                        <img src="images/question-circle.svg" class="ms-2" style="height: 1.5rem; background-color: lightgray;" alt="Not Completed" />
                    }
                </span>
            </div>
        </TemplateColumn>
        <TemplateColumn>
            <div>
                <span class="d-flex align-items-center">
                    @if (@queryRiddle.IsCompleted)
                    {
                        <a href="/currentTask/@queryRiddle.QueryRiddleID" class="btn btn-outline-success btn-sm ms-2">Edit</a>
                    }
                    else
                    {
                        <a href="/currentTask/@queryRiddle.QueryRiddleID" class="btn btn-outline-primary btn-sm ms-2">Solve</a>
                    }
                </span>
            </div>
        </TemplateColumn> 
        *@

    </QuickGrid>
}

@code {

    private List<QueryRiddleDTO> QueryRiddleDTOs { get; set; } = new List<QueryRiddleDTO>();
    private PaginationState pagination = new PaginationState { ItemsPerPage = 5 };
    private bool isLoading { get; set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {

            try
            {
                await LoadDataAsync();
            }
            catch (Exception ex)
            {

            }
            finally
            {
                isLoading = false;
                StateHasChanged();
            }
        }
    }

    private async Task LoadDataAsync()
    {
        //QueryRiddleDTOs = await RepositoryProvider.QueryRiddleRepository.GetAll();

        var y = await RepositoryProvider.QueryRiddleRepository.Get(18);

        var z = new QueryRiddleDTO()
        {
            DBSchemaID = y.DBSchemaID,
            Question = y.Question,
            QuestionCorrectAnswer = y.QuestionCorrectAnswer,
            //QuestionCorrectAnswerID = y.QuestionCorrectAnswerID,
            QuestionLevelID = y.QuestionLevelID
        };

        z.QuestionCorrectAnswer.ID = 0;

        //await RepositoryProvider.QueryRiddleRepository.Update(x);

        //await RepositoryProvider.QueryRiddleRepository.Save(z);

        await RepositoryProvider.QueryRiddleRepository.Delete(28);
        await RepositoryProvider.
    }
}
